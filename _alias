#!/bin/bash

# "do" : execute one command on multiple folders
alias d='~/bin/d'

uname="$(uname)"
if [ 'MINGW' = "${uname:0:5}" ]; then
    IS_WINDOWS=1
else
    IS_WINDOWS=0
fi

if [[ 1 -eq $IS_WINDOWS ]]; then
    alias dir='ls'
fi

which xmlstarlet > /dev/null
if [[ 0 -eq $? ]]; then
    alias x='xmlstarlet'
fi


if [[ 1 -eq $IS_WINDOWS ]]; then
   o (){
      start "$@"
   }
else
    which xdg-open > /dev/null
    if [[ 0 -eq $? ]]; then
       o (){
           xdg-open "$@" 2>&1 > /dev/null
       }
   fi
fi

# Ack
which ack > /dev/null
if [[ 0 -eq $? ]]; then
    alias a='ack'
fi

# Maven
which mvn > /dev/null
if [[ 0 -eq $? ]]; then
    # TODO : print error when cwd does not contains a pom.xml
    alias m='mvn'
    alias md='mvnDebug'
    alias mi='mvn install'
    alias mci='mvn clean install'
    alias mist='mvn install -DskipTests'
    alias mcist='mvn clean install -DskipTests'

    # default effective pom output
    mvn_effective_pom_file='target/effective-pom.xml'

    # maven effective pom
    mvn_effective_pom () {
       local out="${1:-$mvn_effective_pom_file}"
       mvn help:effective-pom -Doutput="$out" >/dev/null || return 1
    }

    # maven dependency graph (without clutter)
    mdep (){
       local outFile='target/.mdep'
       mvn dependency:tree -DoutputFile="$outFile" "$@">/dev/null || return 1
       cat **/$outFile
       rm -f **/$outFile
    }

    # maven project version (with submodules)
    which xmlstarlet > /dev/null
    if [[ 0 -ne $? ]]; then
        mpv () {
            echo "missing dependency : xmlstarlet"
            return 1;
        }
    else
        mpv () {
           mvn_effective_pom || return 1

           # remove namespace declarations for easy selection (xmlstarlet is a pain here)
           sed -i 's/<project .*>/<project>/' "${mvn_effective_pom_file}"

           xmlstarlet sel -t -m '//project' \
              -v 'groupId'  -o ' '  -v 'artifactId'  -o ' '  -v 'version' -n \
              "${mvn_effective_pom_file}"
           rm -f "${mvn_effective_pom_file}"
        }
    fi


    # maven effective pom (output to console for easy grep)
    mep () {
       local out="${1:-$mvn_effective_pom_file}"
       mvn_effective_pom $out && cat $out && rm -f $out
    }


fi

# Git
which git > /dev/null
if [[ 0 -eq $? ]]; then
    # taken as-is form zsh/oh-my-zsh configuration to make it work with bash too
    _current_branch () {
      ref=$(git symbolic-ref HEAD 2>/dev/null) || head=$(git rev-parse --short HEAD 2>/dev/null)
      echo ${ref#refs/heads/}
    }

    alias g='git'
    alias gl='git log --decorate --oneline --graph'
    alias gld='git log --decorate --oneline --graph --simplify-by-decoration'
    alias gls='git ls-files --exclude-standard'
    alias gh='git help'
    alias gpr='git pull --rebase'
    alias gp='git pull'
    alias gpu='git push'
    alias gf='git fetch --all --tags'
    alias gst='git status -sb'
    alias ga='git add'
    alias gap='git add -vp'
    alias gr='git reset'
    alias gds='git diff --staged'
    alias gd='git diff'
    alias gc='git commit'
    alias ggpull='git pull --rebase origin $(_current_branch) && git fetch origin $(_current_branch)'
    alias ggpush='git push origin $(_current_branch)'
    alias gco='git checkout'
    # allow to know which commits have been merged upstream/to specific branch
    alias gch='git cherry -v'
    alias gcp='git cherry-pick'
    alias gsl='git shortlog --email'
    glsu (){
       git ls-files -u | awk '{print $4}' | sort -u
    }

    # git for branch : execute command on a branch
    # parameters
    # 1 : branch name
    # 2 and more : command parameters (passed as-is)
    gfb () {
       local head="$(_current_branch)"
       [[ -n "$(git status -s)" ]] && echo "can't work on dirty state repo" && return 1
       local branch="${1:-master}"
       shift
       git checkout "$branch" 2>/dev/null 1>/dev/null
       echo "$branch -> $@\n"
       $@
       git checkout "$head" 2>/dev/null 1>/dev/null
    }

    # git repo url
    gru (){
      echo "$(git config --get remote.origin.url | sed -e 's+git@\(.*\):\(.*\)\.git+https://\1/\2/+')"
    }
    # git branch url
    # parameters :
    # 1 : branch name, defaults to current branch if not provided
    gbu (){
      local branch="${1:-$(_current_branch)}"
      echo "$(gru)tree/$branch"
    }
    # git commit url
    # generate commit url using repository url, tested only with github
    # parameters :
    # 1 : commit ref, fallback to HEAD if not provided
    gcu (){
      local ref="$(git rev-parse ${1:-HEAD})"
      echo "$(gru)commit/$ref"
    }
    if [ -n "$JIRA_URL" ]; then
      # generate git jira message
      # parameters :
      # 1 : commit ref (defaults to HEAD)
      # 2 : branch name (defaults to current branch)
      gjm (){
         local commit="$(git rev-parse ${1:-HEAD})"
         local commitUrl="$(gcu $commit)"
         local branch="${2:-$(_current_branch)}"
         local branchUrl="$(gbu $branch)"
         echo "fixed at commit [[$commit|$commitUrl]]"
         echo "on branch [[$branch|$branchUrl]]"
      }
   fi

fi


which vim > /dev/null
if [[ 0 -eq $? ]]; then
    if [[ 1 -eq $IS_WINDOWS ]]; then
        alias v='gvim'
    else
        alias v='vim'
        alias gv='UBUNTU_MENUPROXY=gvim;gvim'
    fi
fi

# Virtualbox
which vboxmanage > /dev/null
if [[ 0 -eq $? ]]; then
    #TODO : add zsh autocompletion support

    _waitCommandEnd() {
       vboxmanage  showvminfo  "$1" >/dev/null
    }

    _powerOff(){
       vboxmanage controlvm "$1" poweroff
       _waitCommandEnd "$1"
    }

    _restoreCurrent(){
       vboxmanage snapshot "$1" restorecurrent
       _waitCommandEnd "$1"
    }

    _startVm(){
       vboxmanage startvm "$1"
       _waitCommandEnd "$1"
    }

    vbox(){
        cmd="${1:-list}"
        vmId="$2"
        targetFile="$3"

        case "$cmd" in
           "usage" )
              echo "usage :"
              echo "  vbox usage : display this help"
              echo "  vbox list : list VMs (and get their ID)"
              echo "  vbox playagain <id> : power off, restore snapshot and start vm"
              echo "  vbox start <id> : start vm"
              echo "  vbox stop <id> : stop vm (power off)"
              echo "  vbox export <id> [target] : export vm, defaults to box.ovf"
              return 1
              ;;
           "list" )
              vboxmanage list vms | sed 's/ {/ |{/' | column -t -s \|
              ;;
           "start" )
              _startVm "$vmId"
              ;;
           "playagain" )
              _powerOff "$vmId"
              _restoreCurrent "$vmId"
              _startVm "$vmId"
              ;;
           "stop" )
              _powerOff "$vmId"
              ;;
           "export" )
              vboxmanage export "$vimId" --output "${targetFile:-box.ovf}"
              ;;
        esac
        return $?
    }

fi

# easy filesytem nav
# thanks to http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
alias j='jump'
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' | column -t
}
function _completemarks {
    reply=($(ls $MARKPATH))
}
if [[ 'zsh' = "${SHELL#/bin/}" ]];then
   # zsh style completion
   compctl -K _completemarks jump
   compctl -K _completemarks unmark
fi

if [[ 'bash' = "${SHELL#/bin/}" ]];then
   # bash style completion
   _completemarks() {
     local curw=${COMP_WORDS[COMP_CWORD]}
     local wordlist=$(find $MARKPATH -type l -printf "%f\n")
     COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
     return 0
   }
   complete -F _completemarks jump unmark
fi
