
This file contains all things I've learned and those that I still need to

=== Good beginner tutorial ===

http://ontwik.com/tools/vim-from-novice-to-professional-by-derek-wyatt-p1/
http://ontwik.com/tools/vim-from-novice-to-professional-by-derek-wyatt-part-2/
http://ontwik.com/tools/vim-from-novice-to-professional-by-derek-wyatt-part-3/

=== TODOs ===

- navigation between modes : see help of "i_esc"

- difference between select and visual modes ? same for replace and vreplace ?
    ->  *Select-mode*

- plugins -
TODO : learn how to use nerdcommenter efficiently
    <leader>cc : comment
    <leader>c<space> : toggle comment
    <leader>cs : sexy comment
    <leader>cy : yank and then comment
    <leader>ca : switch comment delimiter ( // or /* */

    -> find how we can deal with nesting issues
        javascript in html/jsp file
    

- other stuff -

TODO : syntax highlight for java7 : diamond operator

stuff from tony, I have to test

    " directories for swp files
    set backupdir=~/.vim/backup
    set directory=~/.vim/backup

    " enable persistant undo
    set udf
    set undodir=~/.vim/vimundo



TODO : investigate showbreak

TODO : abbreviations (save typing !!)
    -> :ab

TODO : see :behave
    -> :behave xterm|mswin : changes how mouse behaves
    -> default value depends on current system

TODO : see quickfix window and how to use it
TODO : see how we can make maven errors output to quickfix win
    -> how to display java compiler errors & warnings ?

TODO : insert mode
    i_CTRL-A : insert text from previous insert
    i_CTRL-@ : idem Ctrl-a, then leaves insert
    i_CTRL-W : delete word before cursor
    i_CTRL-U : delete all entered characters in current line
        - useful to "revert" current small insert/change 
            -> weird : repeat Ctrl-u allows to edit outside insert/change area 
        -> TODO : see i_backspacing for joining lines

    <CR>, i_Ctrl-J,  i_Ctrl-M : begin new line



TODO : use marks across buffers (use capital letters)
    > see if we could "copy this text to at this mark" in a single command

TODO : add :FufMruCmd to insert most recently used commands

TODO : see how 'clipboard' option works, and how to improve its usage
    [09.3] explains 2 kinds of X clipboards : current selection & real
    -> probably the best explaination on the subject I've found yet
    "* : current selection clipboard
    "+ : real clipboard
    -> experiment how it works with X and within xterm and term

TODO : use command line completion "cmdline-completion"
    Ctrl-D : show list of all matches
    Ctrl-A : insert list of matches

TODO : command-line editing
    Cmdline-mode 

TODO : use advanced insert mode completion :
        -> see help on *i_CTRL-X_index*

TODO : mouse integration for linux console
    mousefocus : auto focus window under cursor
    mousehide : hide mouse when characters are typed
    mousemodel : set right click behavior
        = extend : same behavior as xterm
    TODO : mouse scrolling : scroll-mouse-wheel
    mouse options : 'mouse' 'mousemodel' 'mousetime' 'mousehide' 'selectmode'

TODO : enable/disable spell check (with a function key??)
    set spell! -> toggle spellcheck
    -> needs argument(s) to get the used language/locale

TODO vim 7.3 new features : relativenumber and undofile

TODO write swap files in a separate directory
    :h directory
    -> use a directory in user home
    -> create directory if it does not exists on startup
    -> make it work with windows/linux

TODO use standard regex for search ?
  add a \v to search pattern, see what it means for regex and refs
  nnoremap / /\v
  vnoremap / /\v

TODO long lines and text formatting : 'wrap', 'textwidth', 'formatoptions', 'colorcolumn'
    - [no]wrap : wrap or not long lines
    - textwidth : maximum line length, 0 to disable
    - formatoptions : buffer format options see fo-table for reference
        TODO : test all formatoptions
        TODO : find what "comment leader" means to actual comments

TODO : text formatting
    gq : command to format text

TODO :
    see how 'comments' 'format-comments' 'commentstring' works
    section 30.6 of help
    - comments movements : ]/ -> end of comment
    - different kinds of comments : how to make them work well with xml ?

TODO : surround plugin and comments

TODO : custom keyboard mappings
    create a map that shows all possibilities (should be a nice graph/visu project)
    use output of :map

TODO : find/create a plugin that enable to have per-project and per-environment configurations
    http://stackoverflow.com/questions/456792/vim-apply-settings-on-files-in-directory
        - using a local file that .vimrc uses to detect which parameters should be used
        -> there is a plugin that creates .localvimrc configurations files
        -> there is an incompatibility with .localvimrc and ack plugin

TODO : search how to use buffers batch operations (bufdo)

TODO : display marks in buffers 
    -> sounds like it is not possible (according to help)

TODO : change insert mode notification color
        help 'hl'
        |hl-ModeMsg|	 M  Mode (e.g., "-- INSERT --")

TODO text formatting
    right center and left commands 
    look at fmt command line tool

TODO truncate long lines when typing 
    wrapmargin : right margin, inserts an <CR> when closer than n characters from left border
    ???? : hard margin (can't exceed)
           soft margin (shows what is extra)

=== Registers ===

see help of : c_CTRL-R for a short list
9 types of registers :
    1. The unnamed register ""
    2. 10 numbered registers "0 to "9
        0 contains last yank content
        1-9 contains delete|change history
    3. The small deletechange register "-
        deletions|changes of less than a line (without explicit reg.)
    4. 26 named registers "a to "z or "A to "Z 
        lowercase to replace, uppercase to append
    5. four read-only registers ":, "., "% and "#
        . : last inserted text
        % : current file name
        # : alternate file name
        @ : most recent command line, use @: to repeat last
    6. the expression register "=
        TODO : how to use it ?
        -> can we implement a function line "put row number at EOL" ?
    7. The selection and drop registers "*, "+ and "~
        * : selection clipboard (same as + on mswin)
        + : clipboard
        ~ : last drag&drop (default behavior will insert at cursor)
    8. The black hole register "_
    9. Last search pattern register "/

=== Tabs ===
:tab help gt : open "help gt" in a new tab
:tabonly : close all other tabs

TODO : read [tab-page]

=== Command Mode ===
Ctrl-v : insert next character litterally (useful for tabs, line endings, ...)
Ctrl-Left or Shift-Left : move 1 word left (respectively right)
Ctrl-b : move to beginning
Ctrl-e : move to end
Ctrl-w : delete word before cursor
Ctrl-r a : insert content of register a

=== Spell Check ===

[no]spell : enable/disable spell check
spellang : select spell check language
z= : prompts for suggestions


=== Keyboard Mappings ===

add <silent> : avoids command to be printed in command line after its execution
add <unique> : avoids to override an already defined mapping
add <expr> : string is an expression and have to be evaluated (ex: function calls)
Note: not all features are available within function, but returning characters allow to execute stuff after return


=== Surround ===

TODO : delete surround does not work with * character ?
-> like when editing some markdown
-> does not seem to be supported (thanks to documentation)

yss : surround whole line
ySS : surround whole line and indent it

ySw : surround word and indent it
ysw : surround word

- in visual mode -
s : surround selection
S : surround selection and indent it (if in visual-line)
==> seems to be broken in current release

=== Ctrl-P ===

Ctrl-p to open ctrl-p
Ctrl-d : switch full path and file name matching
Ctrl-r : switch regexp search on|off

Shift-Tab : switch focus : window|prompt
    >> TODO : no idea what it means

Ctrl-j : move selection up
Ctrl-k : move selection down

-- Cursor prompt movements --
Ctrl-a : to start
Ctrl-e : to end
Ctrl-h : left
Ctrl-l : right

-- Prompt editing --
Ctrl-w : remove preceding (inner) word
Ctrl-u : clear prompt

-- Files operations --

<cr> : open in current window
Ctrl-t : open in a new tab
Ctrl-v : open in a vertical split

Ctrl-y : create file and its parent folders

F5 : purge cache

TODO : see how "wildignore" allows to ignore certain paths 
    -> :h ctrlp-wildignore
    -> but has some side-effects, so use with care
TODO : ignore only for ctrl-p : let g:ctrlp_custom_ignore = '' 
TODO : see how ctrl_p_user_command helps to list files faster
    - can use vcs or custom shell commands
TODO : open already open file (and options)
TODO : navigate between open buffers
TODO : multiple selection ?
TODO : mru (persistent history ?)

=== NerdTree ===

I : show/hide hidden files
o : expand folder/ open item
O : expand folder and children
t : open in new tab
T : open in background tab

=== Motion ===

hjkl
{,}: previous/next paragraph

Move in current line : 
g^ or ^ : first non blank character
g_ : last non blank character

=== Normal Mode ===

g? : rot13 selection !!!

Ctrl-a : increment numeric value under cursor
Ctrl-x : decrement numeric value under cursor 
    -> both do not work with alphabetic characters

=== Visual Mode ===

Ctrl-@ : insert previously inserted text (and stop insert mode)
Ctrl-A : insert previously inserted text (and stay in insert mode)

gv : retrieve previous visual selection (from normal mode)
operators : [visual-operators]
    ~ : switch case ( also works for current character in normal mode )
o : move to the other end of current visual selection (v_o)
O : move to the opposite corner on the same line of current visual selection (v_O)

visual markers : < -> start of visual selection
                 > -> end of visual selection
thus, to move to start|end of selection we can use `< and `>

=== Insert Mode ===

Ctrl-w : delete word before cursor 
Ctrl-r{reg} : insert content of register {reg}, as if typed
Ctrl-r Ctrl-r{reg} : insert content of register {reg} literally

Ctrl-y : insert caracter above in previous line
Ctrl^v<tab> : insert character '<tab>' litterally (insert a tab when expandtab is enabled)

Ctrl-o <normal cmd> : execute single normal command without leaving insert mode.

-- Auto-Completion --

Ctrl-n : Next Keyword
Ctrl-p : Previous Keyword
Ctrl-x Ctrl-l : insert whole line
Ctrl-x Ctrl-f : insert path to relative file

=== Buffers ===

Ctrl+^ : switch to alternate buffer
:b#    : switch to alternate buffer

=== Windows ===

Ctrl+w then <x> where <x> is :
o : only current window
s : split horizontally
s : split horizontally
h,j,k,l : move cursor to window
Ctrl+w : switch to next window
Ctrl+n : create a new empty window (defaults to hsplit)

:3[v]split : create a 3 line horizontal [vertical] split of current window

=== Folds ===

zf + motion to fold manually an item
{Visual}zf to fold selection
zo to delete current fold

=== Macros ===

q[register] : records typed characters to register (q by default)
@[register] : execute content of register
@@ : re-execute last macro

=== Jumps ===

:jumps for list
Ctrl+O : move to previous jump
Ctrl+I : move to next jump
'' : return to previous position after a jump (like a search, go to start/end of file, ...)


=== Colors & Syntax ===

:syntax reset : reset colors when something went wrong
:syntax on|off : enable/disable syntax hightlight

=== Options ===

:set wrap? : display current option value
:set wrap! : toggle option (boolean)
:set wrap& : reset option to default value

=== Help ===

:options : display all possible options and current setting

:helpg {pattern} : help grep
    -> then navigate results using quickfix window through :cwindow and :cnext

=== Command Line mode ===

<Up> : search cmd history with current cmd as prefix

Ctrl+r : insert value of a register into command line
  named registers (not exhaustive)
   %  current file name
   *  clipboard content
   /  last search pattern
   :  last command line

-- Auto-Completion --
Ctrl+d : list names that match the pattern in front of the cursor

=== Tags ===

vim -t bidule : open vim on matching "bidule" tag

Ctrl+] : jump to tag definition
Ctrl+t : return from tag jump
Ctrl+w ] : open tag definition in a new window
Ctrl+w } : open tag definition in preview window

g] : displays and select tag occurences
Ctrl+w g] : displays and select tag occurences in a new window

TODO : create convenient mappings for :tnext :tprev to navigate tag occurences

== Preview Window ==

Ctrl+w z : close any preview window (in current tab)

=== Text Objects ===

examples:
cip : change inner paragraph
das : delete whole sentence

text objects :
- p : paragraph
- s : sentence
- t : xml tag
- " : between double quotes
- ' : between single quotes
- ) : between parentheses, also works with (
- } : between curly braces, also works with {
- ] : between square braces, also works with [
- > : xml opening tag, also works with <, useful to edit tag and its attributes


=== Text substitutions ===

:[range]s/from/to/[options] : replace "from" with "to" in range
options :
    c : confirm each replacement
    g : global (whole line)

when pattern is full of '/', we can use another character for pattern delimiter
ex : s+src/before+src/after+g

=== Execute external command ===

.!command : execute command and put output at current line
%!command : execute command an replace whole buffer content with output

'shell' option controls which shell is used

=== Highlight ===

:so $VIMRUNTIME/syntax/hitest.vim : display active highligh groups
:verbose hi SpecialKey : display where SpecialKey group have been last set

=== Avoid the Esc Key ===

Ctrl+[ : alternative to Esc

alt+_ keys : escape insert mode and ...
alt+[hjkl] : move in direction
alt+A : move cursor to end of line (and stay in insert mode)
alt+[pP] : paste at current location

=== Misc. ===

:TOhtml : convert buffer content to HTML
ZZ : alternative to :wq
ZQ : alternative to :q!

--- command line options ---

vim -o file1 file2 : open files in horizontal split windows
vim -O file1 file2 : open files in vertical split windows

vim -t tagItem : open first occurence of tagItem (ctags)

