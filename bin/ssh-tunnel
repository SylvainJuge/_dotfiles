#!/bin/bash

# this scripts makes it easier to switch between local/ssh tunneling to same host
# - generates ssh tunnel config to put in your ~/.ssh/config
# - edits /etc/hosts file on start|stop to make localhost appear as remote server
# - add/removes iptables rules to use same ports as on remote server

# TODO : load configuration from user-local configuration, to avoid editing this file in place
# TODO : make redirect rule only on local 127.0.0.10 ip
# TODO : check that we have no conflicts with local open ports (that may be listenign on *.*.*.* by default)
# TODO : autonatically disable tunnel when script is killed
# TODO : compact syntax for mapping :
# dev1:22,80,3690;dev2
# TODO : take port offset from parameters, with default in 10k range

# host name on the local network accessed through ssh
tunnel_remote_host=remote-server

# list of remote ports you want to redirect
tunnel_remote_ports="80"

# local ip used as redirection to remote host in 127.0.0.0/8 range
tunnel_local_ip=127.0.0.10

local_port_offset=10000;

# used to identify iptables rule & lines in /etc/hosts file
tag=ssh-tunnel

PID_FILE=~/.ssh-tunnel.pid

setup_hosts(){
    sudo sed -i "\$ a $tunnel_local_ip $tunnel_remote_host # $tag" /etc/hosts
}

remove_hosts(){
    sudo sed -i "/# $tag/d" /etc/hosts
}

setup_iptables(){
    sshconfig=""
    for remote_port in $tunnel_remote_ports; do
        local_port=$(($local_port_offset+$remote_port))
        sudo iptables -t nat -A OUTPUT -p tcp -m tcp \
            -d $tunnel_local_ip \
            --dport $remote_port \
            -j REDIRECT \
            --to-ports $local_port \
            -m comment --comment "$tag $remote_port"

        sshconfig="$sshconfig -R $local_port:$tunnel_remote_host:$remote_port"
    done
    echo "$sshconfig"
}

remove_iptables(){
    rules=$( \
        sudo iptables -t nat --list --numeric --line-numbers \
        | grep "$tag" \
        | awk '{print $1}' \
        | sort -n --reverse)
    for rule in $rules; do
        sudo iptables -t nat -D OUTPUT $rule
    done
}

usage(){
    echo "usage : $0 <command> [parameters]"
    echo "commands : "
    echo " start user@host : open ssh tunnel to specified host"
    echo " stop : stop ssh tunnel"
}

start_tunnel(){

    stop_tunnel

    sshConfig="$(setup_iptables)"
    setup_hosts

    # TODO : check for ssh parameters
    ssh -N "$@" $sshConfig&
    if [[ "0" == "$?" ]]; then
        echo $! > $PID_FILE 
    else
        echo "error while opening ssh tunnel with command 'ssh -N \"$@\"'"
    fi
}

stop_tunnel(){
    remove_iptables
    remove_hosts
    if [ -e $PID_FILE ]; then
        kill -9 $(cat $PID_FILE) 2>/dev/null
        rm $PID_FILE
    fi
}

case "$1" in
    start)
        start_tunnel "$2"
        ;;
    stop)
        stop_tunnel
        ;;
    *) usage; exit 1 ;;
esac

